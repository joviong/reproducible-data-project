ylim(c(-3,3)) +
geom_hline(yintercept = c(-2,2), colour = "red", linetype = "dashed")
## Plotting a graph with labels of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
geom_text(aes(label = res_labels), nudge_y = 0.15) +
ylim(c(-3,3)) +
geom_hline(yintercept = c(-2,2), colour = "red", linetype = "dashed")
## Plotting a graph with labels of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
geom_text(aes(label = res_labels), nudge_y = 0.15, nudge_x = 0.15) +
ylim(c(-3,3)) +
geom_hline(yintercept = c(-2,2), colour = "red", linetype = "dashed")
## plotting it against original linear model graph of FG_per_game to PTS_per_game
lm_plot +
geom_text(aes(label = res_labels), nudge_x = 0.01)
# Looking at hat values/diagonals in order to determine the leverage measurement which indicates it's potential
hats <- hatvalues(fit)
# Now we plot the hat values against the points
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point()
# Looking at hat values that are above the outliers
hat_labels <- if_else(hats >=0.05, paste(points), "")
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point() +
geom_text(aes(label = hat_labels), nudge_y = 0.01)
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point() +
geom_text(aes(label = hat_labels), nudge_y = 0.005)
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point() +
geom_text(aes(label = hat_labels), nudge_y = 0.002)
# Looking at hat values that are above the outliers
hat_labels <- if_else(hats >=0.03, paste(points), "")
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point() +
geom_text(aes(label = hat_labels), nudge_y = 0.002)
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point() +
geom_text(aes(label = hat_labels), nudge_y = 0.003)
lm_plot +
geom_text(aes(label = hat_labels), nudge_x = -0.2)
# Examining the influence when an ith data point is removed in order to fit the model using `cooks.distance()`
cook <- cooks.distance(fit)
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point()
## Looking into points that are away from the rest of the data.
cook_labels <- if_else(cook >= 0.05, paste(points), "")
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point() +
geom_text(aes(label = cook_labels), nudge_y = 0.015)
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point() +
geom_text(aes(label = cook_labels), nudge_y = 0.02)
## Looking into points that are away from the rest of the data.
cook_labels <- if_else(cook >= 0.01, paste(points), "")
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point() +
geom_text(aes(label = cook_labels), nudge_y = 0.02)
## Looking into points that are away from the rest of the data.
cook_labels <- if_else(cook >= 0.1, paste(points), "")
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point() +
geom_text(aes(label = cook_labels), nudge_y = 0.02)
lm_plot +
geom_text(aes(label = cook_labels), nudge_x = 0.2)
# Testing for the independence of observations
car::durbinWatsonTest(fit)
# Assessing homoscedasticity for the values
res <- residuals(fit)
fitted <- predict(fit)
# Plotting values on the graph to determine homoscedasticity
ggplot(data = NULL, aes(x = fitted, y = res)) +
geom_point(colour = "green4") +
geom_hline(yintercept = 0, colour = "red", linetype = "dashed")
# Running test for linearity using the avPlots from `car` package
car::avPlots(fit)
# Looking at multicollinearity using the pairs plot or using the variance inflation factor from the `car` package, `car::vif()`:
pairs(formula = ~ FG_per_game + x2P_per_game + x3P_per_game + FT_per_game, data = dat)
# by using the VIF, we can explore how much larger the standard error increases compared to if that variable had 0 correlation to other predictors
sprt(car::vif(fit))
# by using the VIF, we can explore how much larger the standard error increases compared to if that variable had 0 correlation to other predictors
sqrt(car::vif(fit))
# by using the VIF, we can explore how much larger the standard error increases compared to if that variable had 0 correlation to other predictors
car::vif(fit)
## Randomness in the pattern within the plotted graph tells us that there is in fact homoscedasticity within the
ggplot(data = NULL, aes(x = fitted, y = res)) +
geom_point(colour = "green4") +
geom_smooth(se = FALSE, colour = "magenta")
ggplot(data = NULL, aes(x = res)) +
geom_histogram(colour = "black", fill = "dodgerblue")
ggplot(data = NULL, aes(sample = res)) +
stat_qq() + stat_qq_line()
# Testing for normally distributed figures
ggplot(data = NULL, aes(x = res)) +
geom_histogram(colour = "dodgerblue", fill = "green2")
# Testing for normally distributed figures
ggplot(data = NULL, aes(x = res)) +
geom_histogram(colour = "darkblue", fill = "green2")
# Testing for normally distributed figures
ggplot(data = NULL, aes(x = res)) +
geom_histogram(colour = "darkblue", fill = "green4")
## Evidence that FT_per_game and FG_per_game relates to more PTS_per_game by using a multiple linear regression to model the relationship
fit <- lm(log(PTS_per_game ^ 2) ~ log(FG_per_game + FT_per_game), data = dat)
## Evidence that FT_per_game and FG_per_game relates to more PTS_per_game by using a multiple linear regression to model the relationship
fit <- lm(log(PTS_per_game ^ 2) ~ log(FG_per_game + FT_per_game), data = dat, na.rm = TRUE)
tidy(fit, conf.int = TRUE)
# Looking at multicollinearity using the pairs plot or using the variance inflation factor from the `car` package, `car::vif()`:
pairs(formula = ~ FG_per_game + x2P_per_game + x3P_per_game + FT_per_game, data = dat)
# by using the VIF, we can explore how much larger the standard error increases compared to if that variable had 0 correlation to other predictors
car::vif(fit)
# Checking the relationship for multicollinearity using the pairs plot between each scoring factor against points scored
pairs(formula = ~ x3P_per_game + x2P_per_game + FT_per_game, data = dat)
# Do players with more x3P score more points per game
ggplot(dat, aes(x = RB_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm", se = FALSE)
# Do players with more TOV_per_game score more points per game
ggplot(dat, aes(x = TOV_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm", se = FALSE)
# Do players with more FT_per_game score more points per game
ggplot(dat, aes(x = FT_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm", se = FALSE)
## Evidence that FT_per_game and FG_per_game relates to more PTS_per_game by using a multiple linear regression to model the relationship
fit <- lm(PTS_per_game ~ FG_per_game + FT_per_game + RB_per_game + TOV_per_game, data = dat)
tidy(fit, conf.int = TRUE)
summary(fit)
# Checking the relationship for multicollinearity using the pairs plot between each scoring factor against points scored
pairs(formula = ~ FG_per_game + FT_per_game + RB_per_game + TOV_per_game, data = dat)
# Detecting outliers in the game
std_res <- rstandard(fit)
points <- 1:length(std_res)
## Plotting the point of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
ylim(c(-4,4)) +
geom_hline(yintercept = c(-3,3), colour = "red", linetype = "dashed")
# Labelling the outlier points if the absolute value of a std_res is greater than 1 std_res
res_labels <- if_else(abs(std_res) >= 2, paste(points), "")
## Plotting a graph with labels of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
geom_text(aes(label = res_labels), nudge_y = 0.15, nudge_x = 0.15) +
ylim(c(-3,3)) +
geom_hline(yintercept = c(-2,2), colour = "red", linetype = "dashed")
## Plotting a graph with labels of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
geom_text(aes(label = res_labels), nudge_y = 0.15, nudge_x = 0.15) +
ylim(c(-4,4)) +
geom_hline(yintercept = c(-3,3), colour = "red", linetype = "dashed")
## Plotting a graph with labels of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
geom_text(aes(label = res_labels), nudge_y = 0.2, nudge_x = 0.2) +
ylim(c(-4,4)) +
geom_hline(yintercept = c(-3,3), colour = "red", linetype = "dashed")
## Plotting a graph with labels of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
geom_text(aes(label = res_labels), nudge_y = 0.2, nudge_x = 0.4) +
ylim(c(-4,4)) +
geom_hline(yintercept = c(-3,3), colour = "red", linetype = "dashed")
## Plotting a graph with labels of the outliers
ggplot(data = NULL, aes(x = points, y = std_res)) +
geom_point() +
geom_text(aes(label = res_labels), nudge_y = 0.2, nudge_x = 0.5) +
ylim(c(-4,4)) +
geom_hline(yintercept = c(-3,3), colour = "red", linetype = "dashed")
## plotting it against original linear model graph of FG_per_game to PTS_per_game
lm_plot +
geom_text(aes(label = res_labels), nudge_x = 0.01)
# Looking at hat values/diagonals in order to determine the leverage measurement which indicates it's potential
hats <- hatvalues(fit)
# Now we plot the hat values against the points
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point()
# Looking at hat values that are above the outliers
hat_labels <- if_else(hats >=0.05, paste(points), "")
ggplot(data = NULL, aes(x = points, y = hats)) +
geom_point() +
geom_text(aes(label = hat_labels), nudge_y = 0.003)
lm_plot +
geom_text(aes(label = hat_labels), nudge_x = -0.2)
# Examining the influence when an ith data point is removed in order to fit the model using `cooks.distance()`
cook <- cooks.distance(fit)
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point()
## Looking into points that are away from the rest of the data.
cook_labels <- if_else(cook >= 0.1, paste(points), "")
ggplot(data = NULL, aes(x = points, y = cook)) +
geom_point() +
geom_text(aes(label = cook_labels), nudge_y = 0.02)
lm_plot +
geom_text(aes(label = cook_labels), nudge_x = 0.2)
# Testing for the independence of observations
car::durbinWatsonTest(fit)
# Assessing homoscedasticity for the values
res <- residuals(fit)
fitted <- predict(fit)
# Plotting values on the graph to determine homoscedasticity
ggplot(data = NULL, aes(x = fitted, y = res)) +
geom_point(colour = "green4") +
geom_hline(yintercept = 0, colour = "red", linetype = "dashed")
# Testing for normally distributed figures
ggplot(data = NULL, aes(x = res)) +
geom_histogram(colour = "darkblue", fill = "green4")
# Running test for linearity using the avPlots from `car` package
car::avPlots(fit)
# Looking at multicollinearity using the pairs plot or using the variance inflation factor from the `car` package, `car::vif()`:
pairs(formula = ~ FG_per_game + x2P_per_game + x3P_per_game + FT_per_game, data = dat)
# by using the VIF, we can explore how much larger the standard error increases compared to if that variable had 0 correlation to other predictors
car::vif(fit)
# After reading in data, we want to look at creating new variables for the players in the form of shooting metrics that apply to points scoring
dat <- players
# eliminating unwanted data that is irrelevant to the stats
team_1 <- select(team_stats_1, -c(X23, X24, X25))
# eliminating unwanted data that is irrelevant to the stats
team_1 <- select(team_1, -c(X23, X24, X25))
# Joining both team_stats_.. sheet to each other and running exploratory analysis based on that
team_final <- full_join(team_1, team_2, by = c("Team"))
team_final <- select(team_final, -c(rank.x, rank.y))
# Creating a PTS_per_game variable to allow for analysis
team_final <- mutate(team_final, PTS_per_game = PTS / G)
ggplot(players, aes(x = eFGp, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm", se = FALSE)
# creating more per_game box score statistics for players
players <- players %>%
mutate(FG_per_game = FG / G,
x3P_per_game = x3P / G,
x2P_per_game = x2P / G,
FT_per_game = FT / G,
PTS_per_game = PTS / G)
ggplot(players, aes(x = eFGp, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm", se = FALSE)
ggplot(players, aes(x = FG_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm", se = FALSE)
# We then plot the graph to see if there is a relationship
lm_plot <- ggplot(players, aes(x = FG_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "magenta") +
geom_smooth(method = "lm", se = FALSE)
tidy(fit, conf.int = TRUE)
summary(fit)
# Checking the relationship for multicollinearity using the pairs plot between each scoring factor against points scored
pairs(formula = ~ FG_per_game + FT_per_game + RB_per_game + TOV_per_game, data = dat)
# Checking the relationship for multicollinearity using the pairs plot between each scoring factor against points scored
pairs(formula = ~ FG_per_game + FT_per_game + RB_per_game + TOV_per_game, data = players)
# Testing for the independence of observations
car::durbinWatsonTest(fit)
# Plotting values on the graph to determine homoscedasticity
ggplot(data = NULL, aes(x = fitted, y = res)) +
geom_point(colour = "green4") +
geom_hline(yintercept = 0, colour = "red", linetype = "dashed")
## Randomness in the pattern within the plotted graph tells us that there is in fact homoscedasticity within the
ggplot(data = NULL, aes(x = fitted, y = res)) +
geom_point(colour = "green4") +
geom_smooth(se = FALSE, colour = "magenta")
ggplot(data = NULL, aes(x = res)) +
geom_histogram(colour = "darkblue", fill = "green4")
# Checking the relationship for multicollinearity using the pairs plot between each scoring factor against points scored
pairs(formula = ~ FG_per_game + FT_per_game + RB_per_game + TOV_per_game, data = players)
# Running test for linearity using the avPlots from `car` package
car::avPlots(fit)
# by using the VIF, we can explore how much larger the standard error increases compared to if that variable had 0 correlation to other predictors
car::vif(fit)
View(team_salary)
players <- salary %>%
select(player, salary) %>%
right_join(players, by = "player")
View(players)
# Creating new object by player position to select team
## PG
players_PG <- filter(players, Pos == "PG")
## SG
players_SG <- filter(players, Pos == "SG")
## SF
players_SF <- filter(players, Pos == "SF")
## PF
players_PF <- filter(players, Pos == "PF")
## C
players_C <- filter(players, Pos == "C")
View(players_C)
View(players_PF)
View(players_PG)
player_final <- players %>%
right_join(salary, players)
salary <- read_csv("data/raw/2018-19_nba_player-salaries.csv")
salary <- rename(salary, player = `player_name`)
players <- salary %>%
select(player, salary) %>%
right_join(players, by = "player")
players <- filter(players, -(salary.y))
players <- filter(players, -c(salary.y))
players <- select(players, -c(salary.y))
players <- rename(players, salary = "salary.x")
# Creating new object by player position to select team
## PG
players_PG <- filter(players, Pos == "PG")
## SG
players_SG <- filter(players, Pos == "SG")
## SF
players_SF <- filter(players, Pos == "SF")
## PF
players_PF <- filter(players, Pos == "PF")
## C
players_C <- filter(players, Pos == "C")
View(chi_team)
players_PG %>%
select(name, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_PG %>%
select(player, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players %>%
ggplot(aes(x = salary/1000000, y = PTS_per_game, colour = Pos)) +
geom_point() +
xlab("Salary (Millions)")
players_SG %>%
select(player, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_SF %>%
select(player, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
# Selecting BIGs based on RB_category, FT_per_game, PTS_per_game and FG_category
players_PF %>%
select(player, salary, RB_category, FG_category, FT_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_C %>%
select(player, salary, RB_category, FG_category, FT_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_SF %>%
select(player, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_C %>%
select(player, salary, RB_category, FG_category, FT_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_SF %>%
select(player, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_SG %>%
select(player, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
#selecting guards based on FG_category, TOV_category, x3P_per_game and PTS_per_game
players_PG %>%
select(player, salary, FG_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_C %>%
select(player, salary, RB_category, FG_category, FT_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_PF %>%
select(player, salary, RB_category, FG_category, FT_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
# creating more per_game box score statistics for players
players <- players %>%
mutate(FG_per_game = FG / G,
x3P_per_game = x3P / G,
x2P_per_game = x2P / G,
FT_per_game = FT / G,
AST_per_game = AST / G,
PTS_per_game = PTS / G)
# Creating new object by player position to select team
## PG
players_PG <- filter(players, Pos == "PG")
## SG
players_SG <- filter(players, Pos == "SG")
## SF
players_SF <- filter(players, Pos == "SF")
## PF
players_PF <- filter(players, Pos == "PF")
## C
players_C <- filter(players, Pos == "C")
# seeking out players with above average AST rates
players <- players %>%
mutate(AST_per_game = AST / G)
players %>%
summarise(mn = mean(AST_per_game, na.rm = TRUE),
sd = sd(AST_per_game, na.rm = TRUE),
count = n())
players <- players %>%
mutate(AST_category = if_else(condition = AST_per_game < 1.06,
true = "below average", false = "above average"))
players <- players %>%
mutate(AST_category = if_else(condition = AST_per_game < 2,
true = "below average", false = "above average"))
# Creating new object by player position to select team
## PG
players_PG <- filter(players, Pos == "PG")
## SG
players_SG <- filter(players, Pos == "SG")
## SF
players_SF <- filter(players, Pos == "SF")
## PF
players_PF <- filter(players, Pos == "PF")
## C
players_C <- filter(players, Pos == "C")
#selecting guards based on AST_category, TOV_category, x3P_per_game and PTS_per_game
players_PG %>%
select(player, salary, AST_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_SG %>%
select(player, salary, AST_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_SF %>%
select(player, salary, AST_category, TOV_category, x3P_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
# Selecting BIGs based on RB_category, FT_per_game, PTS_per_game and FG_category
players_PF %>%
select(player, salary, RB_category, TOV_category, FT_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_C %>%
select(player, salary, RB_category, TOV_category, FT_per_game, PTS_per_game) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
dat <- mutate(players, exp_PTS = predict(fit, newdata = players))
View(dat)
player <- mutate(players, exp_PTS = predict(fit, newdata = players))
players_C %>%
select(player, salary, RB_category, TOV_category, FT_per_game, exp_PTS) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
# Creating new object by player position to select team
## PG
players_PG <- filter(players, Pos == "PG")
## SG
players_SG <- filter(players, Pos == "SG")
## SF
players_SF <- filter(players, Pos == "SF")
## PF
players_PF <- filter(players, Pos == "PF")
## C
players_C <- filter(players, Pos == "C")
players_C %>%
select(player, salary, RB_category, TOV_category, FT_per_game, exp_PTS) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players <- mutate(players, exp_PTS = predict(fit, newdata = players))
# Creating new object by player position to select team
## PG
players_PG <- filter(players, Pos == "PG")
## SG
players_SG <- filter(players, Pos == "SG")
## SF
players_SF <- filter(players, Pos == "SF")
## PF
players_PF <- filter(players, Pos == "PF")
## C
players_C <- filter(players, Pos == "C")
players_C %>%
select(player, salary, RB_category, TOV_category, FT_per_game, exp_PTS) %>%
arrange(desc(PTS_per_game), salary) %>%
top_n(15)
players_C %>%
select(player, salary, RB_category, TOV_category, FT_per_game, exp_PTS) %>%
arrange(desc(exp_PTS), salary) %>%
top_n(15)
players %>%
ggplot(aes(x = salary/1000000, y = exp_PTS colour = Pos)) +
geom_point() +
xlab("Salary (Millions)")
players %>%
ggplot(aes(x = salary/1000000, y = exp_PTS, colour = Pos)) +
geom_point() +
xlab("Salary (Millions)")
players %>%
ggplot(aes(x = salary/1000000, y = exp_PTS, colour = Pos)) +
geom_point() +
xlab("Salary (Millions)")
#selecting guards based on AST_category, TOV_category, x3P_per_game and exp_PTS
players_PG %>%
select(player, salary, AST_category, TOV_category, x3P_per_game, exp_PTS) %>%
arrange(desc(exp_PTS), salary) %>%
top_n(15)
players_SG %>%
select(player, salary, AST_category, TOV_category, x3P_per_game, exp_PTS) %>%
arrange(desc(exp_PTS), salary) %>%
top_n(15)
players_SF %>%
select(player, salary, AST_category, TOV_category, x3P_per_game, exp_PTS) %>%
arrange(desc(exp_PTS), salary) %>%
top_n(15)
# Selecting BIGs based on RB_category, FT_per_game, exp_PTS and FG_category
players_PF %>%
select(player, salary, RB_category, TOV_category, FT_per_game, exp_PTS) %>%
arrange(desc(exp_PTS), salary) %>%
top_n(15)
players_C %>%
select(player, salary, RB_category, TOV_category, FT_per_game, exp_PTS) %>%
arrange(desc(exp_PTS), salary) %>%
top_n(15)
