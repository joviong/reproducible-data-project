library(tidyverse)
# reading in the data for each spreadsheet
player_stats <- read_csv("data/raw/2018-19_nba_player-statistics.csv")
team_stats_1 <- read_csv("data/raw/2018-19_nba_team-statistics_1.csv")
team_stats_2 <- read_csv("data/raw/2018-19_nba_team-statistics_2.csv")
salary <- read_csv("data/raw/2018-19_nba_player-salaries.csv")
team_salary <- read_csv("data/raw/2019-20_nba_team-payroll.csv")
# checking for na values within the datasets
sum(is.na(player_stats))
sum(is.na(team_stats_1))
sum(is.na(team_stats_2))
sum(is.na(salary))
sum(is.na(team_salary))
# discovering which line of data the na values are located in
which(is.na(player_stats), arr.ind = TRUE)
which(is.na(team_stats_1), arr.ind = TRUE)
# cleaning up the object names to conform with tidy data
player_stats <- rename(player_stats, player = `player_name`, FGp = `FG%`, x3P = `3P`, x3PA = `3PA`, x3Pp = `3P%`, x2P = `2P`, x2PA = `2PA`, x2Pp = `2P%`, eFGp = `eFG%`, FTp = `FT%`)
team_stats_1 <- rename(team_stats_1, rank = `Rk`, x3PAr = `3PAr`, TSp = `TS%`, eFGp = `eFG%`, TOVp = `TOV%`, ORBp = `ORB%`, DRBp = `DRB%`)
team_stats_2 <- rename(team_stats_2, rank = `Rk`, FGp = `FG%`, x3P = `3P`, x3PA = `3PA`, x3Pp = `3P%`, x2P = `2P`, x2PA = `2PA`, x2Pp = `2P%`, FTp = `FT%`)
View(team_stats_1)
View(team_stats_2)
View(team_salary)
View(salary)
View(player_stats)
# eliminating data that does not hold value within the process
team_stats_1 <- select(team_stats_1, -c(X23, X24, X25))
# creating new variable in player_stats to determine points score (seeking for starters)
player_stats <- mutate(player_stats, PTS_per_min = PTS / MP)
# utilising the euqtion for points per minute scored based on Kubatko et al. considering reserve players who played fewer minutes. Seeking for players who ay have the opportunity to play more minutes as a breakout (reserve bench player metric)
player_stats <- mutate(player_stats, PTS_per_min40 = PTS / MP * 40)
# creating mFG to use in player efficiency code
player_stats <- mutate(player_stats, mFG = FGA - FG)
# creating mFG to use in player efficiency code
player_stats <- player_stats %>%
mutate(player_stats, mFG = FGA - FG) %>%
mutate(player_stats, mFT = FTA - FT)
# linear weights to evaluate player class as used by NBA.com
players_stat <- mutate(player_stats, eff_rate = PTS + ORB + DRB + AST + STL + BLK - TOV - mFG - mFT)
# linear weights to evaluate player class as used by NBA.com
players_stats <- mutate(player_stats, eff_rate = PTS + ORB + DRB + AST + STL + BLK - TOV - mFG - mFT)
# linear weights to evaluate player class as used by NBA.com
player_stats <- mutate(player_stats, eff_rate = PTS + ORB + DRB + AST + STL + BLK - TOV - mFG - mFT)
View(player_stats)
# linear weights to evaluate player class as used by NBA.com
player_stats <- mutate(player_stats, eff_rate = (PTS + ORB + DRB + AST + STL + BLK) - (TOV + mFG + mFT))
# setting Total Score % for the player level according to Kubatko et al.
player_stats <- mutate(player_stats, TSp = (PTS/2) / (FGA + 0.44 * FTA))
# merging column values
player_stats <- aggregate(player_stats$c(G : PTS), by=list(player=player_stats$player), FUN=sum)
# merging column values
player_stats <- aggregate(player_stats$c(G | PTS), by=list(player=player_stats$player), FUN=sum)
# merging column values
player_stats <- aggregate(player_stats$list(G : PTS), by=list(player=player_stats$player), FUN=sum)
# merging column values
player_stats <- aggregate(player_stats$G : PTS, by=list(player=player_stats$player), FUN=sum)
?aggregate
# merging column values
player_stats <- aggregate(player_stats$G ~ PTS, by=list(player=player_stats$player), FUN=sum)
# merging column values
player_stats <- player_stats %>%
distinct(player, Tm, .keep_all = TRUE)
# merging column values
player_stats <- player_stats %>%
subset(player, Tm == "TOT")
# merging column values
player_stats <- player_stats %>%
subset(player_stats, player, Tm == "TOT")
library(tidyverse)
player_stats <- read_csv("data/raw/2018-19_nba_player-statistics.csv")
team_stats_1 <- read_csv("data/raw/2018-19_nba_team-statistics_1.csv")
team_stats_2 <- read_csv("data/raw/2018-19_nba_team-statistics_2.csv")
salary <- read_csv("data/raw/2018-19_nba_player-salaries.csv")
team_salary <- read_csv("data/raw/2019-20_nba_team-payroll.csv")
player_stats <- rename(player_stats, player = `player_name`, FGp = `FG%`, x3P = `3P`, x3PA = `3PA`, x3Pp = `3P%`, x2P = `2P`, x2PA = `2PA`, x2Pp = `2P%`, eFGp = `eFG%`, FTp = `FT%`)
team_stats_1 <- rename(team_stats_1, rank = `Rk`, x3PAr = `3PAr`, TSp = `TS%`, eFGp = `eFG%`, TOVp = `TOV%`, ORBp = `ORB%`, DRBp = `DRB%`)
team_stats_2 <- rename(team_stats_2, rank = `Rk`, FGp = `FG%`, x3P = `3P`, x3PA = `3PA`, x3Pp = `3P%`, x2P = `2P`, x2PA = `2PA`, x2Pp = `2P%`, FTp = `FT%`)
# eliminating data that does not hold value within the process
team_stats_1 <- select(team_stats_1, -c(X23, X24, X25))
# setting Total Score % for the player level according to Kubatko et al.
player_stats <- mutate(player_stats, TSp = (PTS/2) / (FGA + 0.44 * FTA))
# sorting duplicates for traded players rows
df_player_stats <- player_stats[!duplicated(player_stats),]
View(df_player_stats)
select(player, Tm)
player_stats %>%
select(player, Tm)
player_stats %>%
select(player, Tm)
player_stats %>%
select(player, Tm) %>%
distinct(player, Tm, .keep_all = TRUE)
665 - 580
player_stats[!duplicated(player_stats$Tm),]
df <- player_stats[!duplicated(player_stats$Tm),]
View(df)
df <- player_stats[!duplicated(player_stats$Tm | !duplicated(player_stats$player)),]
df <- player_stats[!duplicated(player_stats$Tm & !duplicated(player_stats$player)),]
df <- player_stats[!duplicated(player_stats$Tm) | (player_stats$player),]
df <- player_stats[!duplicated(player_stats$Tm) & (player_stats$player),]
df <- player_stats[!duplicated(player_stats$player),]
View(df)
View(player_stats)
# reading in the data for each spreadsheet
player_stats <- read_csv("data/raw/2018-19_nba_player-statistics.csv")
# cleaning up the object names to conform with tidy data
player_stats <- rename(player_stats, player = `player_name`, FGp = `FG%`, x3P = `3P`, x3PA = `3PA`, x3Pp = `3P%`, x2P = `2P`, x2PA = `2PA`, x2Pp = `2P%`, eFGp = `eFG%`, FTp = `FT%`)
# sorting duplicates for traded players rows
df <- player_stats[!duplicated(player_stats$player),]
View(df)
View(player_stats)
# sorting duplicates for traded players rows
df <- player_stats[!duplicated(player_stats$player), Tm,]
# sorting duplicates for traded players rows
df <- player_stats[!duplicated(player_stats$player), Tm]
# sorting duplicates for traded players rows
df <- player_stats[!duplicated(player_stats$player) & player_stats!= TOT),]
# sorting duplicates for traded players rows
df <- player_stats[!(duplicated(player_stats$player) & player_stats!= TOT),]
# sorting duplicates for traded players rows
df <- player_stats[!(duplicated(player_stats$player) & player_stats$Tm != TOT),]
df <- player_stats %>%
group_by(player)
df <- player_stats %>%
group_by(player) %>%
duplicated(!duplicated(player_stats$Tm, TOT))
# sorting duplicates for traded players rows
df <- player_stats[order(player_stats$player, -abs(player_stats$G)), ]
df <- player_stats[!duplicated(player_stats$G), ]
View(df)
# sorting duplicates for traded players rows
df <- player_stats[order(player_stats$player, -abs(player_stats$G)), ]
df <- player_stats[!duplicated(player_stats$G), ]
View(df)
# sorting duplicates for traded players rows
df <- player_stats[order(player_stats$player, -abs(player_stats$G)), ]
View(df)
team_stats_1 <- team_stats_2 %>%
mutate(poss = FGA + 0.5 * FTA - ORB + TOV -4)
View(team_stats_1)
View(team_stats_2)
View(team_stats_1)
